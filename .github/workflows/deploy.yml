name: Deploy to Server

on:
  push:
    branches: [ main ]

jobs:
  frontend-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
    
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: "./einkaufsliste_frontend/package-lock.json"
    - name: Install Dependencies
      run: cd einkaufsliste_frontend && npm ci

    - name: Lint
      run: cd einkaufsliste_frontend && npm run lint

    - name: Test
      run: cd einkaufsliste_frontend && npm run test:ci

  sonarqube-scanner:
    needs: [frontend-test]
    name: Sonarqube Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  codeql:
    needs: [sonarqube-scanner]
    name: CodeQL Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: javascript, python
      - name: Autobuild
        uses: github/codeql-action/autobuild@v1
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  fossa:
    needs: [codeql]
    name: FOSSA Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: FOSSA Scan
        uses: fossas/fossa-action@v1
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
      - name: FOSSA Test
        uses: fossas/fossa-action@v1
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
          run-test: true

  deploy:
    needs: [fossa]
    name: Deploy to Server
    runs-on: ubuntu-latest
    steps:
      - name: using remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd /home/github/repos/Einkaufsliste
            git pull
            docker-compose -f docker-compose-prod.yml down
            docker-compose -f docker-compose-prod.yml up -d --build --remove-orphans --force-recreate
